<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * QuoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuoteRepository extends \Doctrine\ORM\EntityRepository
{
    public function countActives()
    {
        return count($this->getInProgress());
    }

    public function getInProgress()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT q
                  FROM AppBundle:Quote q
                  WHERE q.expiresAt > CURRENT_TIMESTAMP() AND q.deleted = 0'
            )
            ->getResult();
    }

    public function getEnded()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT q
                  FROM AppBundle:Quote q
                  WHERE q.expiresAt < CURRENT_TIMESTAMP() AND q.deleted = 0'
            )
            ->getResult();
    }

    public function getQuoteByRepresentative($email, $id)
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT q
                  FROM AppBundle:Quote q
                  WHERE q.id = :id
                  AND q.deleted = 0
                  AND q.retailer IN (
                    SELECT IDENTITY(r.retailer)
                    FROM AppBundle:Representative r
                    WHERE r.email = :email
                    AND r.deleted = 0
                  )'
            )
            ->setParameters(array('id' => $id, 'email' => $email))
            ->setMaxResults(1)
            ->getResult();
    }

    public function countQuotesByDate()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT COUNT(q.id) AS quotes, q.createdAt, YEAR(q.createdAt) AS y,
                  MONTH(q.createdAt) AS m, DAY(q.createdAt) as d
                  FROM AppBundle:Quote q
                  WHERE q.deleted = 0
                  GROUP BY y, m, d
                  ORDER BY q.createdAt ASC'
            )
            ->getResult();
    }

    public function countRemote()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT COUNT(q.id) AS quotes, q.createdAt, YEAR(q.createdAt) AS y,
                  MONTH(q.createdAt) AS m, DAY(q.createdAt) as d
                  FROM AppBundle:Quote q
                  WHERE q.deleted = 0
                  AND q.type = 1
                  GROUP BY y, m, d
                  ORDER BY q.createdAt ASC'
            )
            ->getResult();
    }

    public function countPresential()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT COUNT(q.id) AS quotes, q.createdAt, YEAR(q.createdAt) AS y,
                  MONTH(q.createdAt) AS m, DAY(q.createdAt) as d
                  FROM AppBundle:Quote q
                  WHERE q.deleted = 0
                  AND q.type = 2
                  GROUP BY y, m, d
                  ORDER BY q.createdAt ASC'
            )
            ->getResult();
    }

    public function findBySupplier($id)
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT q
                  FROM AppBundle:Quote q
                  WHERE q.deleted = 0
                  AND q.id IN (
                    SELECT DISTINCT(qp.quote)
                    FROM AppBundle:QuoteProduct qp
                    WHERE qp.deleted = 0  
                    AND qp.product IN (
                      SELECT IDENTITY(qs.quoteProduct)
                      FROM AppBundle:QuoteSupplier qs
                      WHERE qs.deleted = 0 
                      AND qs.representative IN (
                        SELECT r.id
                        FROM AppBundle:Representative r
                        WHERE r.deleted = 0
                        AND r.supplier IN (
                          SELECT s.id
                          FROM AppBundle:Supplier s
                          WHERE s.deleted = 0
                          AND s.cnpj = (
                            SELECT s2.cnpj
                            FROM AppBundle:Supplier s2
                            WHERE s2.id = :id
                          )
                        )
                      )
                    )
                  )'
            )
            ->setParameters(array('id' => $id))
            ->getResult();
    }

    public function findByProduct($id)
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT q
                  FROM AppBundle:Quote q
                  WHERE q.deleted = 0
                  AND q.id IN (
                    SELECT IDENTITY(qp.quote)
                    FROM AppBundle:QuoteProduct qp
                    WHERE qp.product = :id
                  )'
            )
            ->setParameters(array('id' => $id))
            ->getResult();
    }

    public function findByDate($date)
    {
        $date = explode('-', $date);
        return $this->getEntityManager()
            ->createQuery(
                'SELECT q
                  FROM AppBundle:Quote q
                  WHERE q.deleted = 0
                  AND YEAR(q.createdAt) = :y
                  AND MONTH(q.createdAt) = :m
                  AND DAY(q.createdAt) = :d'
            )
            ->setParameters(array('y' => $date[0], 'm' => $date[1], 'd' => $date[2]))
            ->getResult();
    }
}
